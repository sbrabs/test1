defaultStorageMapping: TGT
installedPackages: {}
jobs: {}
locations:
  CPY:
    mappingDefinitions:
      "76":
        database: SCOTT_DB
        schema: psyncbs2_prod
  DT:
    mappingDefinitions:
      "76":
        database: SCOTT_DB
        schema: psyncbs2_prod
  JSON:
    mappingDefinitions:
      "76":
        database: SCOTT_DB
        schema: psyncbs2_prod
  SRC:
    mappingDefinitions:
      "76":
        database: COALESCE_SAMPLE_DATABASE
        schema: TPCH_SF001
  TGT:
    mappingDefinitions:
      "76":
        database: SCOTT_DB
        schema: psyncbs2_prod
  UTILITY:
    mappingDefinitions:
      "76":
        database: SCOTT_DB
        schema: psyncbs2_prod
macros:
  Macro-1:
    id: "1"
    macroString: |+
      {#-- This macro will drop a table / view / dynamic table if it already exists as a different or the same object type #}
      {#-- Errors can occur when creating a same named object of a different type #}

      {% macro dropTblView() %}
        {%- set db = ref_no_link(node.location.name, node.name).split('.')[0]  %} 
        {%- set sch = ref_no_link(node.location.name, node.name).split('.')[1]  %} 
        {%- set obj = "{{ node.name }}"  %} 

          begin
              let db varchar := '{{db}}';
              let sch varchar := '{{sch}}';
              let obj varchar := '{{obj}}';

              begin
                  execute immediate 'drop table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop view if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop dynamic table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop task if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
          end;
      {% endmacro %}

      {% macro resumeRootTask() %}
      {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
      {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
      {%- set fqRootTaskName = '' + tgtDb + '.' + tgtSch + '.' + desiredState.config.rootTask + ''-%} 

      begin
          let sqlDml := 'select system$task_dependents_enable(''''{{fqRootTaskName}}'''')';
          execute immediate sqlDml;
              exception
                  when statement_error then
                  return 'Task already running';
          return 'Task resumed';
      end;
      {% endmacro %}

      {% macro dup_rename() %}
          {{ sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='node') | map(attribute='name') | first + "_" + sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='column') | map(attribute='name') | first }}
      {%- endmacro %}

      {%- macro partition_by() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = desiredState.node.name -%}

          {%- for i in desiredState.config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}

      {%- macro partition_by_adv() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = desiredState.node.name -%}

          {%- for i in desiredState.config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = getSourceNameFromColumnName_adv(colName) + '."' + colName + '"' -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName_adv(colName) + '."' + colName + '"' -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}

      {% macro order_by_col_adv(return) %}
          {% set nsVariables = namespace(orderBy="") -%}

          {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') -%}
              {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') -%}
              {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
              {% set nsVariables.orderBy = getSourceNameFromColumnName_adv(dateTimeCol) + '."' + dateTimeCol + '"' -%}
          {% else -%}
              {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') -%}
              {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
              {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
              {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName_adv(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName_adv(timeCol) + '."' + timeCol + '")' -%}
          {% endif -%}

          {{ nsVariables.orderBy }}

      {% endmacro %}

      {% macro order_by_col(return) %}
          {% set nsVariables = namespace(orderBy="") -%}

          {% if config.recordVersioning in ('Datetime Column','Numeric Column') -%}
              {% set datetimeNumericColSort = config.orderBy.get('items') -%}
              {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
              {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '"' -%}
          {% else -%}
              {% set dateTimeColSort = config.orderByDateTime.get('items') -%}
              {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
              {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
              {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '")' -%}
          {% endif -%}

          {{ nsVariables.orderBy }}

      {% endmacro %}

      {% macro dimensionHistoryPk_adv() %}
          {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

          {%- set partitionBy = partition_by_adv().split(",") -%}
          {%- set orderBy = order_by_col_adv() -%}

          {%- for col in partitionBy -%}
              {%- if loop.first -%}
                  {%- set nsVariables.dimensionHistoryColumns = col -%}
              {%- else -%}
                  {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
              {%- endif -%}
          {%- endfor -%}

          {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

          {{- nsVariables.dimensionHistoryColumns -}}

      {% endmacro %}

      {% macro dimensionHistoryPk() %}
          {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

          {%- set partitionBy = partition_by().split(",") -%}
          {%- set orderBy = order_by_col() -%}

          {%- for col in partitionBy -%}
              {%- if loop.first -%}
                  {%- set nsVariables.dimensionHistoryColumns = col -%}
              {%- else -%}
                  {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
              {%- endif -%}
          {%- endfor -%}

          {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

          {{- nsVariables.dimensionHistoryColumns -}}

      {% endmacro %}

      {% macro sourceTable() %}
          {%- set nsVariables = namespace(partition="") -%}
          {% set sourceTableName = desiredState.node.name %}

          {%- for i in desiredState.config.partitionBy.get('items') -%}

          {%- if loop.first -%}
              {%- set nsVariables.partition = '"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- else -%}
              {%- set nsVariables.partition = nsVariables.partition + ',"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- endif -%}

          {%- endfor %}

          {{- nsVariables.partition -}}

      {% endmacro %}

      {%- macro getColumnId( colName ) -%}

          {%- set columnId = columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

          {{- columnId -}}

      {%- endmacro -%}

      {% macro getSourceNameFromColumnName( colName ) %}

          {%- set sourceObject = sources[0].columns | selectattr('id','eq',getColumnId( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {% macro getSourceNameFromColumnId( colId ) %}

          {%- set sourceObject = sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {%- macro getColumnId_adv( colName ) -%}

          {%- set columnId = desiredState.columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

          {{- columnId -}}

      {%- endmacro -%}

      {% macro getSourceNameFromColumnName_adv( colName ) %}

          {%- set sourceObject = desiredState.sources[0].columns | selectattr('id','eq',getColumnId_adv( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {% macro getSourceNameFromColumnId_adv( colId ) %}

          {%- set sourceObject = desiredState.sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {%- macro ref_raw(location_name, node_name) -%}
          {%- raw -%}{{ ref('{% endraw %}{{- location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_no_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}


      {%- macro join_columns() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}

          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = colName -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + colName -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}



packages: {}
projects:
  "1":
    name: SCOTTFIXESDEPLOYMENT
stepTypes:
  StepType-116:
    id: "116"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of De-Dupe
        short: DE_DUPE
        tagColor: violet
        plural: De-Dupes

        config:
        - groupName: De-Dupe Config
          items:

          - displayName: Primary Key
            attributeName: isBusKey
            type: columnSelector
            isRequired: true

          - displayName: Exact Match ALL
            attributeName: isExactMatchALL
            type: columnSelector
            isRequired: true
          
          - displayName: Exact Match ANY
            attributeName: isExactMatchANY
            type: columnSelector
            isRequired: true

        systemColumns:
        - displayName: GROUP_ID
          transform: ''
          dataType: INT
          placement: end
          attributeName: group_id
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create ' + node.name  + ' Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT '{{ col.defaultValue }}'{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |-
            {{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}

            {#{% if columns | selectattr('isExactMatchALL') | list | length > 0 %} #}

              {{ stage('Create edges table') }}
              CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, 'tblEdge') }}
              (
                ROW_ID INT IDENTITY START 1 INCREMENT 1,
                GROUP_NO INT NULL DEFAULT 0
                ,LFT VARCHAR(50) NULL
                ,RGT VARCHAR(50) NULL
              )

              {# 'INITIALIZE variables '#}
            	{# 'set source table name '#}
              {% set src_table_name = sources[0].dependencies[0].node.name %}

            	{# 'set business key name '#}
              {% set ns = namespace() %}
              {% set ns.business_key = '<no business key found>' %}
              {%- for col in columns %}
                {% if col.isBusKey %}
                    {% set ns.business_key = col.name  %}
                {% endif %}
              {% endfor %}
              
              

              {{ stage('find and insert edges') }}
              INSERT INTO {{ ref_no_link(node.location.name, 'tblEdge') }} 
              (LFT,RGT) 
              {%- for colANY in columns  if colANY.isExactMatchANY %}
              

              SELECT * FROM(
              WITH tblA AS(       
                SELECT
            			{% for col in sources[0].columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %} 
                ,ROW_NUMBER() OVER (PARTITION BY
                    {%- for col in columns  if col.isExactMatchALL %}
                            "{{ col.name }}"
                          {% if not loop.last %}, {% endif %} 
                    {% endfor %} 
                    , "{{ colANY.name }}"
                    ORDER BY
                    {%- for col in columns  if col.isBusKey %}
                            "{{ col.name }}"
                          {% if not loop.last %}, {% endif %} 
                    {% endfor %}) AS ROW_NUM
                        {{ sources[0].join }} 
              )
                SELECT 
                   {%- for col in columns  if col.isBusKey %}
                            L."{{ col.name }}",R."{{ col.name }}"
                          {% if not loop.last %}, {% endif %} 
                    {% endfor %}
                FROM tblA L INNER JOIN tblA R
                ON  {%- for col in columns  if col.isExactMatchALL %}
                           L."{{ col.name }}" = R."{{ col.name }}"
                          {% if not loop.last %} AND {% endif %} 
                    {% endfor %} 
                AND L."{{ colANY.name }}" = R."{{ colANY.name }}"
                AND L.ROW_NUM = R.ROW_NUM - 1
                WHERE TRIM(NVL(L."{{ colANY.name }}",'')) <> '' AND TRIM(NVL(R."{{ colANY.name }}",'')) <> ''
              )
             {% if not loop.last %}UNION {% endif %} 

             {% endfor %} 

             
            {{ stage('Identify groups and assign a number') }}

              EXECUTE IMMEDIATE $$
              BEGIN
              WHILE ( (SELECT COUNT(*) FROM {{ ref_no_link(node.location.name, 'tblEdge') }}  WHERE GROUP_NO = 0) > 0)  DO
              
              UPDATE {{ ref_no_link(node.location.name, 'tblEdge') }}  e1
               SET GROUP_NO = g1.GROUP_NO
               FROM(
                      WITH max_Group_no AS(
                            SELECT MAX(GROUP_NO) AS GROUP_NO FROM {{ ref_no_link(node.location.name, 'tblEdge') }} 
                      ) 
                         , cte_tblGroup AS(
                          SELECT TOP 1 ROW_ID,mg.GROUP_NO + 1 AS GROUP_NO,LFT,RGT FROM {{ ref_no_link(node.location.name, 'tblEdge') }}  e ,max_Group_no mg WHERE e.GROUP_NO = 0 
                           UNION ALL
                          SELECT e.ROW_ID,g.GROUP_NO ,e.LFT,e.RGT
                          FROM {{ ref_no_link(node.location.name, 'tblEdge') }}  e 
                             INNER JOIN cte_tblGroup g  ON (e.lft = g.lft OR e.lft = g.rgt OR e.rgt = g.rgt OR e.rgt = g.lft)  
                          WHERE e.ROW_ID > g.ROW_ID
                              )
                   SELECT * FROM cte_tblGroup
                  ) AS g1
              WHERE e1.ROW_ID = g1.ROW_ID;
              END WHILE;
              END;
             $$
            ;

             {{ stage('Final Result') }}

             {% for source in sources %}
              
             INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                    (
                      {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%},{% endif %}
                      {% endfor %}
                    )

                SELECT DISTINCT
            			{% for col in source.columns %}
                     {% if col.name != 'GROUP_ID' %}    
                         {{ get_source_transform(col) }} AS "{{ col.name }}"
                      {% else %}   
                          E.GROUP_NO
                      {% endif %}  
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
              	{{ source.join }}	 
                INNER JOIN {{ ref_no_link(node.location.name, 'tblEdge') }}  "E"
                 ON {{ src_table_name }} {{'.'}} {{ ns.business_key }}  = E.LFT 
                      OR {{ src_table_name }} {{'.'}} {{ ns.business_key }}  = E.RGT

                 UNION

                SELECT DISTINCT
            			{% for col in source.columns %}
                      {% if col.name != 'GROUP_ID' %}    
                         {{ get_source_transform(col) }} AS "{{ col.name }}"
                      {% else %}   
                          NVL(E.GROUP_NO, -{{ src_table_name }}.{{ ns.business_key }} )
                      {% endif %}  
            				  {%- if not loop.last -%}, {% endif %}
            			{% endfor %}
              	{{ source.join }}	 
                LEFT JOIN {{ ref_no_link(node.location.name, 'tblEdge') }}  "E"
                 ON {{ src_table_name }} {{'.'}} {{ ns.business_key }} = E.LFT 
                          OR {{ src_table_name }} {{'.'}} {{ ns.business_key }}= E.RGT 
                WHERE E.LFT IS NULL OR E.RGT IS NULL
                                                                                  
            	{% endfor %}

               
             
            {# SELECT * FROM tblEdges #}
            {# {% endif %}    #}  
                    
    name: De-Dupe
    version: 1
  StepType-119:
    id: "119"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dyanmic Table Stage
        short: DT
        tagColor: yellow
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

            - type: multisourceToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false
      templates:
        create:
          templateString: |
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}
                    {% set joinTest = currentState.join == desiredState.join %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Varialbes
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        joinTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    {{ stage('Create Dynamic Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} REFRESH

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table Stage
    version: 1
  StepType-121:
    id: "121"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Dyanmic Table Stage
        short: DT_DIM
        tagColor: yellow
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

          - groupName: Dimension Options
            items:
            - type: tabular
              displayName: 'Table Key(s)'
              attributeName: partitionBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: partColName
                 isRequired: true
                
              isRequired: true

            - displayName: Record Versioning
              attributeName: recordVersioning
              type: dropdownSelector
              default: Datetime Column
              options:
                - Datetime Column
                - Date Column and Time Column
                - Numeric Column
              isRequired: true

            - type: tabular
              displayName: 'Timestamp or Sequence'
              attributeName: orderBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: colName
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Date / Timestamp Columns'
              attributeName: orderByDateTime
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Date Column
                 attributeName: colNameDate
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: columnDropdownSelector
                 displayName: Timestamp Column
                 attributeName: colNameTimestamp
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrdDateTimestamp
                 default: desc
                 options:
                 - desc
                 - asc
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: '{{ dimensionHistoryPk() }}'
          dataType: STRING
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: RECORD_START_TIME
          transform: '{{ order_by_col() }}'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: RECORD_END_TIME
          transform: 'LEAD({{ order_by_col()}}) OVER (PARTITION BY {{ partition_by() }} ORDER BY {{ order_by_col() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: RECORD_CURRENT_FLAG
          transform: 'CASE WHEN RECORD_END_TIME IS NULL THEN 1 ELSE 0 END'
          dataType: NUMERIC
          placement: end
          attributeName: isRecordCurrent

        - displayName: RECORD_CREATED_DATE
          transform: 'FIRST_VALUE({{ order_by_col()}}) OVER (PARTITION BY {{ partition_by() }} ORDER BY {{ order_by_col() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: recordCreated
      templates:
        create:
          templateString: |
            {{ stage('Nothing to do1.') }}

                {{ nodeMetadata().name }}



            {{ stage('Nothing to do1.') }}

            {% set node = nodeMetadata() %}
            {% set tst = node.name %}

            {{ tst }}

            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0
            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources == desiredState.sources %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Varialbes
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    {{ stage('Create Dynamic Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} REFRESH

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |+
            {{ stage('Nothing to do1.') }}

                {% set nodeA = nodeMetadata() %}

                {{ nodeMetadata().name }}

    name: Dynamic Table Dimension
    version: 1
  StepType-122:
    id: "122"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Dyanmic Table Stage
        short: DT_DIM
        tagColor: yellow
        isDisabled: true
        plural: Dynamic Tables
          
        deployStrategy: advanced

        joinTemplate: |

          {%- set nsVariables = namespace(aliasFirst="") -%}
          {%- set nsVariables = namespace(aliasSecond="") -%}
          {%- set orderByColumn = order_by_col() -%}

          {%- for dep in sources[0].dependencies -%}
              {%- if loop.first -%}
                  {%- set nsVariables.aliasFirst = '"' + dep.node.name + '"' -%}
                  FROM {{ ref_raw(dep.node.location.name, dep.node.name) }} {{ nsVariables.aliasFirst }}
              {%- else -%}
                  {%- set nsVariables.aliasSecond = '"' + dep.node.name + '"' -%}
                  LEFT OUTER JOIN {{ ref_raw(dep.node.location.name, dep.node.name) }} {{ nsVariables.aliasSecond }}
              {%- endif -%}

              {%- if not loop.first -%}
                  {%- set joinColumns = join_columns().split(",") -%}
                  {%- for col in joinColumns -%}
                      {%- if loop.first -%}
                          ON {{ nsVariables.aliasFirst }}."{{col}}" = {{ nsVariables.aliasSecond }}."{{col}}"
                      {%- else -%}
                          AND {{ nsVariables.aliasFirst }}."{{col}}" = {{ nsVariables.aliasSecond }}."{{col}}"
                      {%- endif -%}
                  {%- endfor -%}
              {%- endif -%}
          {%- endfor -%}
          WHERE 1 = 1
          AND {{ nsVariables.aliasSecond }}."RECORD_START_TIME" <= {{- orderByColumn }}
          AND ({{ orderByColumn -}} < {{ nsVariables.aliasSecond }}."RECORD_END_TIME" OR {{ nsVariables.aliasSecond }}."RECORD_END_TIME" IS NULL)

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

          - groupName: Dimension Options
            items:
            - type: tabular
              displayName: 'Table Key(s)'
              attributeName: partitionBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: partColName
                 isRequired: true
                
              isRequired: true

            - displayName: Record Versioning
              attributeName: recordVersioning
              type: dropdownSelector
              default: Datetime Column
              options:
                - Datetime Column
                - Date Column and Time Column
                - Numeric Column
              isRequired: true

            - type: tabular
              displayName: 'Timestamp or Sequence'
              attributeName: orderBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: colName
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Date / Timestamp Columns'
              attributeName: orderByDateTime
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Date Column
                 attributeName: colNameDate
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: columnDropdownSelector
                 displayName: Timestamp Column
                 attributeName: colNameTimestamp
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrdDateTimestamp
                 default: desc
                 options:
                 - desc
                 - asc
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: '{{ dimensionHistoryPk_adv() }}'
          dataType: STRING
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: RECORD_START_TIME
          transform: '{{ order_by_col_adv() }}'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: RECORD_END_TIME
          transform: 'LEAD({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: RECORD_CURRENT_FLAG
          transform: 'CASE WHEN RECORD_END_TIME IS NULL THEN 1 ELSE 0 END'
          dataType: NUMERIC
          placement: end
          attributeName: isRecordCurrent

        - displayName: RECORD_CREATED_DATE
          transform: 'FIRST_VALUE({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: recordCreated
      templates:
        create:
          templateString: |
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources == desiredState.sources %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Varialbes
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    {{ stage('Create Dynamic Table', true, "sql", "create") }}
                    {% if currentState != undefined %} 
                        -- columnsTest {{ columnsTest }}
                        -- sourcesTest {{sourcesTest }}
                        -- nsVariables.storageLocationTest {{ nsVariables.storageLocationTest }}
                        -- storageLocationTest {{ insertStrategyTest }}
                        -- groupByAllTest {{ groupByAllTest }}
                        -- selectDistinctTest {{ selectDistinctTest }}
                        -- nodeNameTest {{ nodeNameTest }}
                        -- nodeMaterializationType {{ nodeMaterializationType }}
                        -- nodeIsMultisource {{ nodeIsMultisource }}
                    {% endif %}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} REFRESH

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |
            {%- macro partition_by() -%}
                {%- set nsVariables = namespace(partition="") -%}
                {%- set sourceTableName = desiredState.node.name -%}

                {%- for i in desiredState.config.partitionBy.get('items') -%}
                    {%- set colName = i.partColName.name -%}
                    {%- if loop.first -%}
                        {%- set nsVariables.partition = getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
                    {%- else -%}
                        {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
                    {%- endif -%}

                {%- endfor -%}

                {{- nsVariables.partition -}}

            {%- endmacro -%}

            {% macro order_by() %}
                {% set nsVariables = namespace(orderBy="") -%}

                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') -%}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') -%}
                    {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
                    {% set sortOrder = datetimeNumericColSort  | map(attribute='sortOrd') | first -%}        
                    {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '" ' + sortOrder -%}
                {% else -%}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') -%}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first -%}
                    {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '") ' + sortOrdDateTimestamp -%}
                {% endif -%}

                {{ nsVariables.orderBy }}

            {% endmacro %}

            {% macro order_by_col(return) %}
                {% set nsVariables = namespace(orderBy="") -%}

                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') -%}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') -%}
                    {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
                    {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '"' -%}
                {% else -%}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') -%}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
                    {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '")' -%}
                {% endif -%}

                {{ nsVariables.orderBy }}

            {% endmacro %}

            {% macro dimensionHistoryPk() %}
                {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

                {%- set partitionBy = partition_by().split(",") -%}
                {%- set orderBy = order_by_col() -%}

                {%- for col in partitionBy -%}
                    {%- if loop.first -%}
                        {%- set nsVariables.dimensionHistoryColumns = col -%}
                    {%- else -%}
                        {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
                    {%- endif -%}
                {%- endfor -%}

                {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

                {{- nsVariables.dimensionHistoryColumns -}}

            {% endmacro %}

            {% macro sourceTable() %}
                {%- set nsVariables = namespace(partition="") -%}
                {% set sourceTableName = desiredState.node.name %}

                {%- for i in desiredState.config.partitionBy.get('items') -%}

                {%- if loop.first -%}
                    {%- set nsVariables.partition = '"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
                {%- else -%}
                    {%- set nsVariables.partition = nsVariables.partition + ',"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
                {%- endif -%}

                {%- endfor %}

                {{- nsVariables.partition -}}

            {% endmacro %}

            {%- macro getColumnId( colName ) -%}

                {%- set columnId = desiredState.columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

                {{- columnId -}}

            {%- endmacro -%}

            {% macro getSourceNameFromColumnName( colName ) %}

                {%- set sourceObject = desiredState.sources[0].columns | selectattr('id','eq',getColumnId( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

                "{{- sourceObject -}}"

            {% endmacro %}

            {% macro getSourceNameFromColumnId( colId ) %}

                {%- set sourceObject = desiredState.sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

                "{{- sourceObject -}}"

            {% endmacro %}

            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources == desiredState.sources %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Varialbes
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    {{ stage('Create Dynamic Table', true, "sql", "create") }}
                    {% if currentState != undefined %} 
                        -- columnsTest {{ columnsTest }}
                        -- sourcesTest {{sourcesTest }}
                        -- nsVariables.storageLocationTest {{ nsVariables.storageLocationTest }}
                        -- storageLocationTest {{ insertStrategyTest }}
                        -- groupByAllTest {{ groupByAllTest }}
                        -- selectDistinctTest {{ selectDistinctTest }}
                        -- nodeNameTest {{ nodeNameTest }}
                        -- nodeMaterializationType {{ nodeMaterializationType }}
                        -- nodeIsMultisource {{ nodeIsMultisource }}
                    {% endif %}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} REFRESH

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
    name: Dynamic Table Dimension - Multi-table Source
    version: 1
  StepType-124:
    id: "124"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: 'My Node Name'
        short: 'MNN'
        plural: 'My Node Names'
        tagColor: '#FF5A5F'

        joinTemplate: |
          {%- for dep in sources[0].dependencies -%}
            {%- if loop.first -%} FROM {% endif %}
            {%- if not loop.first %} LEFT JOIN {% endif -%}
            {{ ref_raw(dep.node.location.name, dep.node.name) }} "{{ dep.node.name }}"
            {% if not loop.first %} ON "{{ sources[0].dependencies[loop.index0].node.name }}"./*COLUMN*/ = "{{ sources[0].dependencies[loop.index0 - 1].node.name }}"./*COLUMN*/ {%- endif %}
          {% endfor -%}
          
          WHERE 1=1



      templates:
        create:
          templateString: ""
        run:
          templateString: ""
    name: Join Template
    version: 1
  StepType-132:
    id: "132"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Materialized View Stage
        short: MV
        tagColor: "#BB8FCE"
        isDisabled: true
        plural: Materialized Views

        deployStrategy: advanced

        config:
          - groupName: Materialized View Options
            items: 
            - type: toggleButton
              attributeName: clusterKey
              displayName: Cluster Key
              default: false
              isRequired: true

            - type: toggleButton
              attributeName: clusterKeyExpressions
              displayName: Allow Expressions in Cluster Key
              default: false
              isRequired: true
              enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Cluster Key'
              attributeName: clusterKeyConfig
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: columnName
                 isRequired: false
            
              isRequired: false
              enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Cluster Key'
              attributeName: clusterKeyConfigExpressions
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: columnNameExpressions
                 isRequired: false
            
              -  type: textBox
                 displayName: Expression
                 attributeName: sqlExpression
                 default: "ex. trunc(<column_name>, -5)"
                 isRequired: false
            
              isRequired: false
              enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

            - type: toggleButton
              attributeName: secureOption
              displayName: Secure
              default: false
              isRequired: true

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Materialized View
              options:
              - Materialized View
              isRequired: false
      templates:
        create:
          templateString: |
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                {# Identify all config changes that would cause a CREATE instead of ALTER #}
                {% if currentState != undefined %} 
                    {# General metadata #}
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set joinTest = currentState.join == desiredState.join %}

                    {# Test to see if the transform in a column has changed #}
                    {# Desired Namespace Variables Transform #}
                    {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {# Test to see if the transform in a column has changed #}
                    {# Current Namespace Variables Transform #}
                    {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# sourceTest handles changed Storage Location Names #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Config #}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    {# Node #}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}

                    {# If any of the above are false then a CREATE must be run #}
                    {% if 
                        columnsTest == false or
                        joinTest == false or
                        columnsTransformTest == false or
                        nsVariables.storageLocationTest == false or
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeMaterializationType == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                {# Identify config changes that would only result in ALTER #}
                {% if createTest == false %}
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}

                    {% set secureOptionTest = currentState.config.secureOption == desiredState.config.secureOption %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {% if 
                        nodeNameTest == false or
                        clusterTest == false or
                        secureOptionTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                {# CREATE or ALTER #}
                {% if (currentState == undefined) or (createTest == true) %}

                    {# Materialized View Name #}
                    {% set targetMaterializedViewDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetMaterializedViewSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetMaterializedViewName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {{ stage('Create Materialized View', true, "sql", "create") }}
                    CREATE OR REPLACE {% if desiredState.config.secureOption %} SECURE {% endif %} MATERIALIZED VIEW {{ fullyQualifiedTargetMaterializedViewName }}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Materialized View Clustering', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ fullyQualifiedTargetMaterializedViewName }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Materialized View', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ fullyQualifiedTargetMaterializedViewName }} RESUME RECLUSTER
                    {% endif %}

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    {# Desired Materialized View Name #}
                    {% set desiredTargetMaterializedViewDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetMaterializedViewSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetMaterializedViewName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}
                    {% set currentFullyQualifiedTargetMaterializedViewName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                    {# Desired Node Name #}
                    {% set desiredNodeName = desiredState.node.name %}

                    {# Desired Secure Option #}
                    {% set desiredSecureOption = desiredState.config.secureOption %}

                    {# Desired Clustering Key #}
                    {% set desiredClusterKey = finalClusterKey %}

                    {# Current Node Name #}
                    {% set currentNodeName = currentState.node.name %}

                    {# Current Secure Option #}
                    {% set currentSecureOption = currentState.config.secureOption %}

                    {# ALTER for Node name #}
                    {% set materializedViewName = '' %}
                    {% if desiredNodeName != currentNodeName %}
                        {% set materializedViewName = 'RENAME TO ' + desiredFullyQualifiedTargetMaterializedViewName %}

                        {{ stage('Alter Materialized View - Rename', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ currentFullyQualifiedTargetMaterializedViewName }}
                            {{ materializedViewName }}
                    {% endif %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster Materialized View', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ desiredFullyQualifiedTargetMaterializedViewName }} 
                        {{ nsVariables.finalClusterKey }}


                    {% endif %}

                    {# ALTER for Secure Option #}
                    {% set materializedViewSecureOption = '' %}
                    {% if desiredSecureOption != currentSecureOption %}
                        {% if desiredSecureOption == true %}            
                            {% set materializedViewSecureOption = 'SET SECURE' %}
                        {% else %}
                            {% set materializedViewSecureOption = 'UNSET SECURE' %}
                        {% endif %}

                        {{ stage('Alter Materialized View - Secure Option', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ desiredFullyQualifiedTargetMaterializedViewName }}
                            {{ materializedViewSecureOption }}
                    {% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Resume Recluster Materialized View', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ desiredFullyQualifiedTargetMaterializedViewName }} RESUME RECLUSTER
                    {% endif %}

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                {# Materialized View Name #}
                {% set targetMaterializedViewDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetMaterializedViewSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetMaterializedViewName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Materialized View', true, "sql", "drop") }}
                DROP MATERIALIZED VIEW IF EXISTS {{ fullyQualifiedTargetMaterializedViewName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |-
            ## Current Namespace Variables Transform
                    {% set currentTransformArray = sources | map(attribute='columns') | first | map(attribute='transform') | list -%}


            {{ stage('Nothing to do.') }}

                    {{ currentTransformArray }}
    name: Materialized View Stage
    version: 1
  StepType-134:
    id: "134"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Materialized View Stage
        short: MV
        tagColor: "#BB8FCE"
        isDisabled: true
        plural: Materialized Views

        deployStrategy: advanced

        config:
          - groupName: Materialized View Options
            items: 
            - type: toggleButton
              attributeName: clusterKey
              displayName: Cluster Key
              default: false
              isRequired: true

            - type: toggleButton
              attributeName: clusterKeyExpressions
              displayName: Allow Expressions in Cluster Key
              default: false
              isRequired: true
              enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Cluster Key'
              attributeName: clusterKeyConfig
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: columnName
                 isRequired: false
            
              isRequired: false
              enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Cluster Key'
              attributeName: clusterKeyConfigExpressions
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: columnNameExpressions
                 isRequired: false
            
              -  type: textBox
                 displayName: Expression
                 attributeName: sqlExpression
                 default: "ex. trunc(<column_name>, -5)"
                 isRequired: false
            
              isRequired: false
              enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

            - type: toggleButton
              attributeName: secureOption
              displayName: Secure
              default: false
              isRequired: true

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Materialized View
              options:
              - Materialized View
              isRequired: false
      templates:
        create:
          templateString: |
            ## Identify all config changes that would cause a CREATE instead of ALTER
                    ## Desired Namespace Variables Transform
                    {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    ## Test to see if the transform in a column has changed
                    ## Current Namespace Variables Transform
                    {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}


            {{ stage('Create Materialized View', true, "sql", "create") }}

            {{ desiredTransformArray }}
        run:
          templateString: |
            ## Identify all config changes that would cause a CREATE instead of ALTER
                    ## Desired Namespace Variables Transform
                    {%- set nsVariables = namespace(nsDesiredTransformArray=[]) %}
                    {% for ds in desiredState.sources %}
                        {% for dc in ds.columns %}
                            {% set nsVariables.nsDesiredTransformArray = nsVariables.nsDesiredTransformArray +  [dc.transform] -%}
                        {% endfor %}
                    {% endfor %}

                    ## Test to see if the transform in a column has changed
                    ## Current Namespace Variables Transform
                    {%- set nsVariables = namespace(nsCurrentTransformArray=[]) %}
                    {% for cs in currentState.sources %}
                        {% for cc in cs.columns %}
                            {% set nsVariables.nsCurrentTransformArray = nsVariables.nsCurrentTransformArray +  [cc.transform] -%}
                        {% endfor %}
                    {% endfor %}


            {{ stage('Create Materialized View', true, "sql", "create") }}

            {{ nsVariables.nsCurrentTransformArray }}
    name: Materialized View Testing
    version: 1
  StepType-19:
    id: "19"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Copy Into
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:
        - groupName: Source Data
          items:
          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: '@'
            isRequired: true

          - displayName: File Name(s) (Optional - Use single quotes and commas)
            attributeName: fileNames
            type: textBox
            isRequired: false

          - displayName: File Pattern (Optional - Use single quotes)
            attributeName: filePattern
            type: textBox
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            enableIf: "{% if config.fileFormatType != 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false
          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false
          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false
          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false
          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false
          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
        - groupName: Copy Options
          items:
          - displayName: Truncate Target Flag
            attributeName: truncateTargetFlag
            type: toggleButton
            isRequired: true
            default: false
          - displayName: On Error Behavior
            attributeName: onError
            type: dropdownSelector
            options:
            - "CONTINUE"
            - "SKIP_FILE"
            - "SKIP_FILE_<num>"
            - "SKIP_FILE_<num>%"
            - "ABORT_STATEMENT"
            isRequired: false
          - displayName: Size Limit
            attributeName: sizeLimit
            type: textBox
            isRequired: false
          - displayName: Purge Behavior
            attributeName: purgeBehavior
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Return Failed Only
            attributeName: returnFailedOnly
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Match By Column Name
            attributeName: matchByColumnName
            type: dropdownSelector
            default: NONE
            options:
            - "CASE_SENSITIVE"
            - "CASE_INSENSITIVE"
            - "NONE"
            isRequired: false
            enableIf: "{% if config.fileType in ('JSON','AVRO','ORC','PARQUET') %} true {% else %} false {% endif %}"
          - displayName: Enforce Length
            attributeName: enforceLength
            type: dropdownSelector
            default: TRUE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Truncate Columns
            attributeName: truncateColumns
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Force
            attributeName: forceLoad
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Load Uncertain Files
            attributeName: loadUncertainFiles
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
      templates:
        create:
          templateString: |
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )
        run:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}


            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}

            {{ stage('Copy Into') }}
                COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                    {%- for col in columns %}
                        "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                FROM (SELECT
                    {%- for col in sources[0].columns %}
                        {{ col.transform }}
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                     FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                {{- fileNameSQL }}
                {{ filePatternSQL }}
                FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
    name: Copy Into
    version: 1
  StepType-32:
    id: "32"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Copy of Copy Into
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:
        - groupName: File Location
          items:
          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: '@'
            isRequired: true

          - displayName: File Name(s) (Optional - Use single quotes and commas)
            attributeName: fileNames
            type: textBox
            isRequired: false

          - displayName: File Pattern (Optional - Use single quotes)
            attributeName: filePattern
            type: textBox
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values

          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"

          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            enableIf: "{% if config.fileFormatType != 'File Format Name' %} true {% else %} false {% endif %}"

          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Snowpipe Options
          items:
          - displayName: Enable Snowpipe
            attributeName: flagSnowpipe
            type: toggleButton
            isRequired: true
            default: true

          - displayName: Load Historical Data
            attributeName: flagLoadHistorical
            type: toggleButton
            isRequired: true
            default: false

        - groupName: Copy Options
          items:
          - displayName: Truncate Target Flag
            attributeName: truncateTargetFlag
            type: toggleButton
            isRequired: true
            default: false

          - displayName: On Error Behavior
            attributeName: onError
            type: dropdownSelector
            options:
            - "CONTINUE"
            - "SKIP_FILE"
            - "SKIP_FILE_<num>"
            - "SKIP_FILE_<num>%"
            - "ABORT_STATEMENT"
            isRequired: false

          - displayName: Size Limit
            attributeName: sizeLimit
            type: textBox
            isRequired: false

          - displayName: Purge Behavior
            attributeName: purgeBehavior
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false

          - displayName: Return Failed Only
            attributeName: returnFailedOnly
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false

          - displayName: Match By Column Name
            attributeName: matchByColumnName
            type: dropdownSelector
            default: NONE
            options:
            - "CASE_SENSITIVE"
            - "CASE_INSENSITIVE"
            - "NONE"
            isRequired: false
            enableIf: "{% if config.fileType in ('JSON','AVRO','ORC','PARQUET') %} true {% else %} false {% endif %}"

          - displayName: Enforce Length
            attributeName: enforceLength
            type: dropdownSelector
            default: TRUE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false

          - displayName: Truncate Columns
            attributeName: truncateColumns
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false

          - displayName: Force
            attributeName: forceLoad
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false

          - displayName: Load Uncertain Files
            attributeName: loadUncertainFiles
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
      templates:
        create:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set tbl = node.name %}
            {% set fqTblName = '"' + db + '"."' + sch + '"."' + tbl + '"' %}
            {% set fqPipeName = '"' + db + '"."' + sch + '"."' + tbl + '_PIPE"' %}

            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}



            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE {{ fqTblName }} (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )

            {%- if config.flagSnowpipe == true -%}
                {{ stage('Create Pipe') }}
                    CREATE OR REPLACE PIPE {{ fqPipeName }} AUTO_INGEST = TRUE AS
                    COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
                            {{ col.transform }}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                        FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                    {{- fileNameSQL }}
                    {{ filePatternSQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
            {% endif %}

            {%- if (config.flagSnowpipe == true) and (config.flagLoadHistorical == true) -%}
                {{ stage('Historical Load') }}

                    COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
                            {{ col.transform }}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                        FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                    {{- fileNameSQL }}
                    {{ filePatternSQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
            {% endif %}
        run:
          templateString: ""
    name: Copy Into - Snowpipe
    version: 1
  StepType-34:
    id: "34"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:

          - type: materializationSelector
            default: table
            options:
            - table
            - view
            - dynamic table
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            

        - groupName: Tabular
          items:
          - type: columnSelector
            displayName: My Column Selector # Name of the column selector (string)
            attributeName: myColumnSelector
            
          - type: businessKeyColumns
            isRequired: false

          - type: tabular
            displayName: 'Lag Specification'
            attributeName: lagSpecification
            columns:
          
            -  type: textBox
               displayName: Time Value
               attributeName: lagNumber
               default: 60
               isRequired: false
            
            -  type: dropdownSelector
               displayName: Time Period
               attributeName: lagType
               default: Minutes
               options:
               - Seconds
               - Minutes
               - Hours
               - Days
               isRequired: false
            
            isRequired: false


        mappingColumns:
          - headerName: Tech Description
            attributeName: techDesc
            type: textBox

        systemColumns:
        - displayName: File Name
          transform: metadata$filename
          dataType: VARCHAR
          placement: end
          attributeName: copyFileName

        - displayName: Copy Timestamp
          transform: current_timestamp()
          dataType: timestamp
          placement: end
          attributeName: copyTimestamp
      templates:
        create:
          templateString: |
            {#% set testsDict = sources | tojson(indent=2) %#}
            {#% set tabConf = config.lagSpecification.get('items')[0].lagNumber %#}

            {#% set storageLoc = (sources[1].columns | selectattr('id','equalto',3384) | map(attribute='sourceColumns') | first | map(attribute='column') | list | map(attribute='tests') | first | map(attribute='name') | list)[1] %#}

            {#% set srcNodeId = sources[0].columns | selectattr('id','equalto',3489) | map(attribute='sourceColumns') | first | map(attribute='node') | list | map(attribute='id') | first %#}

            {#% set srcNodeDetails = sources[0].dependencies | list | selectattr('node.id','equalto',srcNodeId) | list | map(attribute='node') | list  | map(attribute='id') | first %#}

            {#% set srcColId = (columns | map(attribute='id') | list)[1] %#}

            {#% set srcNodeId = sources[0].columns | selectattr('id','equalto',srcColId) | map(attribute='sourceColumns') | first | map(attribute='node') | list | map(attribute='id') | first %#}

            {#% set srcDepColumns = (sources[0].dependencies | list | selectattr('node.id','equalto',"284") | list | map(attribute='columns') | first | selectattr('id', 'equalto', 3353) | map(attribute='tests') | sum(start=[]) | list | map(attribute='templateString') | list) %#}

            {% set srcCustomSQL = node.location.description %}

            {#% set srcNodeId = sources[2].dependencies | list | selectattr('node.id','equalto',srcNodeId) | list | map(attribute='node') | list | map(attribute='name') | first %#}

            {#% set refLink = ref_no_link(storageLoc, srcNodeName) %#}

            {{ stage('Create Stage Table') }}

            {% set sourceArray = [] %}
            {% for tstName in sources[0].columns | selectattr('id','equalto',3384) | map(attribute='sourceColumns') | first | map(attribute='column') | list | map(attribute='tests') | first | map(attribute='name') | list %}
                {% set sourceArray = sourceArray.append(tstName) %}
            {% endfor %}
            {#{ sourceArray }#}
            {#{ storageLoc }#}

            {{ srcCustomSQL }}
        run:
          templateString: |+
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}




            {# set testsDict = columns | map(attribute='id') | list #}
            {#% set tabConf = config.lagSpecification.get('items')[0].lagNumber %#}

            {%# set storageLoc = sources[0].columns | selectattr('id','equalto',3246) | map(attribute='sourceColumns') | first | map(attribute='node') | list | map(attribute='location') | list | map(attribute='name') | first %#}
            {#% set srcNodeName = sources[0].columns | selectattr('id','equalto',3246) | map(attribute='sourceColumns') | first | map(attribute='node') | list | map(attribute='name') | first %#}

            {#% set refTest = sources[0].columns | map(attribute='sourceColumns') | list %#}
            {% set refLink = ref_no_link(storageLoc, srcNodeName) %}

            {{ stage('Create Stage Table') }}
            {# testsDict | list | map(attribute='name') |list #}

            {% set sourceArray = [] %}
            {% for col in sources[0].columns %}
                {% set sourceArray = sourceArray.append(get_source_transform(col)) %}
            {% endfor %}
            {#{ sourceArray }#}
            {{ refLink }}

    name: aJinjaTest
    version: 1
  StepType-48:
    id: "48"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: UNLOAD
        short: 'EXPORT'
        tagColor: 'dodgerblue'
        isDisabled: false
        plural: Unloads
        config:
        - groupName: File Location
          items:
          - displayName: Stage
            attributeName: fileLocation
            type: textBox
            default: <Enter Stage Name>
            isRequired: true

          - displayName: Partition By (Optional)
            attributeName: partitionBy
            type: textBox
            default: ""
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            enableIf: "{% if config.fileFormatType != 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false
          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false
          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false
          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false
          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false
          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Copy Options
          items:
          - displayName: Overwrite Flag
            attributeName: overwriteFiles
            type: toggleButton
            isRequired: true
            default: false

          - displayName: Single File Flag
            attributeName: singleFile
            type: toggleButton
            isRequired: true
            default: false

          - displayName: Max File Size (MB)
            attributeName: sizeLimit
            type: textBox
            default: "16"
            isRequired: true

          - displayName: Include Query ID
            attributeName: queryId
            type: toggleButton
            isRequired: true
            default: false

          - displayName: Detailed Output
            attributeName: detailedOutput
            type: toggleButton
            isRequired: true
            default: false
      templates:
        create:
          templateString: |-
            {{ stage('Nothing to create') }}
            SELECT 1
        run:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

            {%- if config.partitionBy | length > 0 %} 
                {% set partitionBySQL = 'PARTITION BY = (' + config.partitionBy + ')' %} 
            {%- else -%}
                {% set partitionBySQL = "" %} 
            {% endif %}

            {% for source in sources %}
                {% for dep in source.dependencies if dep.node %}
                    {{ stage('Unloading ' + dep.node.name | string ) }}
                    COPY INTO @{{ ref_no_link(node.location.name, config.fileLocation) | trim | upper ~ "/" ~ node.name }}{% if config.singleFile %}.{{ config.fileType | lower }}{% endif %}
                    FROM {{ ref_no_link(dep.node.location.name, dep.node.name) | upper }}
                    {{ partitionBySQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
                    overwrite = {{ config.overwriteFiles }}
                    single = {{ config.singleFile }}
                    max_file_size = {{ config.sizeLimit | int * 1024 * 1024 }} 
                    include_query_id = {{ config.queryId }}
                    detailed_output = {{ config.detailedOutput }}
                {% endfor %}
            {% endfor %}

            {{ stage('Finished Unloading') }}
            select 1
    name: Copy Unload
    version: 1
  StepType-49:
    id: "49"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of UNLOAD
        short: 'EXPORT'
        tagColor: 'dodgerblue'
        isDisabled: false
        plural: Unloads
        materializationType: view
        config:
        - groupName: File Location
          items:
          - displayName: Stage
            attributeName: fileLocation
            type: textBox
            default: <Enter Stage Name>
            isRequired: true

          - displayName: Partition By (Optional)
            attributeName: partitionBy
            type: textBox
            default: ""
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            enableIf: "{% if config.fileFormatType != 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false
          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false
          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false
          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false
          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false
          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Copy Options
          items:
          - displayName: Overwrite Flag
            attributeName: overwriteFiles
            type: toggleButton
            isRequired: true
            default: false

          - displayName: Single File Flag
            attributeName: singleFile
            type: toggleButton
            isRequired: true
            default: false

          - displayName: Max File Size (MB)
            attributeName: sizeLimit
            type: textBox
            default: "16"
            isRequired: true

          - displayName: Include Query ID
            attributeName: queryId
            type: toggleButton
            isRequired: true
            default: false

          - displayName: Detailed Output
            attributeName: detailedOutput
            type: toggleButton
            isRequired: true
            default: false
      templates:
        create:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

            {%- if config.partitionBy | length > 0 %} 
                {% set partitionBySQL = 'PARTITION BY = (' + config.partitionBy + ')' %} 
            {%- else -%}
                {% set partitionBySQL = "" %} 
            {% endif %}

            {% for source in sources %}
                {% for dep in source.dependencies if dep.node %}
                    {{ stage('Unloading ' + dep.node.name | string ) }}
                    COPY INTO @{{ ref_no_link(node.location.name, config.fileLocation) | trim | upper ~ "/" ~ node.name }}{% if config.singleFile %}.{{ config.fileType | lower }}{% endif %}
                    FROM {{ ref_no_link(dep.node.location.name, dep.node.name) | upper }}
                    {{ partitionBySQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
                    overwrite = {{ config.overwriteFiles }}
                    single = {{ config.singleFile }}
                    max_file_size = {{ config.sizeLimit | int * 1024 * 1024 }} 
                    include_query_id = {{ config.queryId }}
                    detailed_output = {{ config.detailedOutput }}
                {% endfor %}
            {% endfor %}

            {{ stage('Finished Unloading') }}
            select 1 as complete
        run:
          templateString: ""
    name: Copy Unload Data
    version: 1
  StepType-52:
    id: "52"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Copy of Copy of Copy Into
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:
        - groupName: File Location
          items:
          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: '@'
            isRequired: true

          - displayName: File Name(s) (Optional - Use single quotes and commas)
            attributeName: fileNames
            type: textBox
            isRequired: false

          - displayName: File Pattern (Optional - Use single quotes)
            attributeName: filePattern
            type: textBox
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"

        - groupName: Snowpipe Options
          items:
          - displayName: Enable Snowpipe
            attributeName: flagSnowpipe
            type: toggleButton
            isRequired: true
            default: true

          - displayName: Load Historical Data
            attributeName: flagLoadHistorical
            type: toggleButton
            isRequired: true
            default: false

        - groupName: Copy Options
          items:
          - displayName: Truncate Target Flag
            attributeName: truncateTargetFlag
            type: toggleButton
            isRequired: true
            default: false

          
      templates:
        create:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set tbl = node.name %}
            {% set fqTblName = '"' + db + '"."' + sch + '"."' + tbl + '"' %}
            {% set fqPipeName = '"' + db + '"."' + sch + '"."' + tbl + '_PIPE"' %}

            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}



            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE {{ fqTblName }} (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )

            {%- if config.flagSnowpipe == true -%}
                {{ stage('Create Pipe') }}
                    CREATE OR REPLACE PIPE {{ fqPipeName }} AUTO_INGEST = TRUE AS
                    COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
                            {{ col.transform }}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                        FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                    {{- fileNameSQL }}
                    {{ filePatternSQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
            {% endif %}

            {%- if (config.flagSnowpipe == true) and (config.flagLoadHistorical == true) -%}
                {{ stage('Historical Load') }}

                    COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
                            {{ col.transform }}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                        FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                    {{- fileNameSQL }}
                    {{ filePatternSQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
            {% endif %}
        run:
          templateString: ""
    name: Snowpipe Autoingest
    version: 1
  StepType-69:
    id: "69"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: COPY INTO - WITH FULL LOAD OPTION
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:
        - groupName: Source Data
          items:
          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: '@'
            isRequired: true

          - displayName: File Name(s) (Optional - Use single quotes and commas)
            attributeName: fileNames
            type: textBox
            isRequired: false

          - displayName: File Pattern (Optional - Use single quotes)
            attributeName: filePattern
            type: textBox
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: true

        systemColumns:
        - displayName: SRC
          transform: '$1'
          dataType: VARIANT
          placement: end
          attributeName: sysJSON

        - displayName: LOAD_TIMESTAMP
          transform: 'current_timestamp()::timestamp_ntz'
          dataType: TIMESTAMP_NTZ
          placement: end
          attributeName: sysLdTs

        - displayName: FILENAME
          transform: 'METADATA$FILENAME'
          dataType: STRING
          placement: end
          attributeName: sysFlNm

        - displayName: FILE_ROW_NUMBER
          transform: 'METADATA$FILE_ROW_NUMBER'
          dataType: NUMBER
          placement: end
          attributeName: sysFlRwNm

        - displayName: FILE_LAST_MODIFIED
          transform: 'METADATA$FILE_LAST_MODIFIED'
          dataType: TIMESTAMP_NTZ
          placement: end
          attributeName: sysFlLtMd

        - displayName: SCAN_TIME
          transform: 'METADATA$START_SCAN_TIME'
          dataType: TIMESTAMP_NTZ
          placement: end
          attributeName: sysFlScTm
      templates:
        create:
          templateString: |
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )
        run:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}


            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}

            {% if parameters.loadType != 'Reload' %}

                {{ stage('Copy Into') }}
                    COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
                            {{ col.transform }}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                        FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                    {{- fileNameSQL }}
                    {{ filePatternSQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')

            {%- else -%}
                {{ stage('Truncate Target Table') }}
                TRUNCATE TABLE IF EXISTS "{{ db }}"."{{ sch }}"."{{ node.name }}"

                {{ stage('Copy Into Force') }}
                    COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
                            {{ col.transform }}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                        FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                    {{- fileNameSQL }}
                    {{ filePatternSQL }}
                    FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
                    FORCE = TRUE

            {% endif %}
    name: Copy Into - With Full Load Option
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
